import pandas as pd
from streamlit_network_explorer.explain_lime import (
    load_pickle_model, build_explainer, explain_row, _detect_mode
)

# Load your model
model = load_pickle_model("data/RAW_best_model.pkl")




# Prepare background data and a target row (must be the same raw feature columns)
feature_cols = ['shop',
 'restaurant',
 'school',
 'bank',
 'fast_food',
 'place_of_worship',
 'fuel',
 'pharmacy',
 'cafe',
 'parking',
 'townhall',
 'bar',
 'police',
 'atm',
 'community_centre',
 'bus_station',
 'clinic',
 'sport',
 'shelter',
 'toilets',
 'hospital',
 'post_office',
 'bench',
 'public_building',
 'college',
 'marketplace',
 'kindergarten',
 'fire_station',
 'dentist',
 'car_wash',
 'temp_min',
 'temp_max',
 'temp_avg',
 'temp_median',
 'temp_p25',
 'temp_p75',
 'temp_std',
 'humidity_min',
 'humidity_max',
 'humidity_avg',
 'humidity_median',
 'humidity_p25',
 'humidity_p75',
 'humidity_std',
 'precipitation_avg',
 'precipitation_p75',
 'precipitation_std',
 'wind_min',
 'wind_max',
 'wind_avg',
 'wind_median',
 'wind_p25',
 'wind_p75',
 'wind_std',
 'pressure_min',
 'pressure_max',
 'pressure_avg',
 'pressure_median',
 'pressure_p25',
 'pressure_p75',
 'pressure_std',
 'clouds_avg',
 'clouds_median',
 'clouds_p25',
 'clouds_p75',
 'clouds_std',
 'aqi_july_mean',
 'pm2_5_july_mean',
 'pm10_july_mean',
 'no_july_mean',
 'no2_july_mean',
 'so2_july_mean',
 'co_july_mean',
 'o3_july_mean',
 'nh3_july_mean',
 '10',
 '10.0.0.0.1',
 '10.0.0.1',
 'ai',
 'anime',
 'calculator',
 'canva',
 'chat',
 'chat gpt',
 'chatgpt',
 'download',
 'drawing',
 'english tagalog',
 'english to tagalog',
 'face',
 'facebook',
 'fb',
 'gmail',
 'google',
 'google translate',
 'gpt',
 'gpt chat',
 'grow a garden',
 'lotto result',
 'map',
 'messenger',
 'movies',
 'now',
 'pag ibig',
 'pinay',
 'piso wifi',
 'poster',
 'reddit',
 'result today',
 'roblox',
 'scandal',
 'sias',
 'sss',
 'swertres',
 'swertres result',
 'swertres result today',
 'tagalog english',
 'tagalog to english',
 'test',
 'the',
 'tiktok',
 'time',
 'time now',
 'translate',
 'translate english to tagalog',
 'translate tagalog to english',
 'translate to english',
 'translate to tagalog',
 'usd to php',
 'videos',
 'weather',
 'weather tomorrow',
 'wifi',
 'wifi pause',
 'you',
 'youtube',
 'Avg Clustering',
 'Degree Centrality',
 'Group Closeness Centrality',
 'amenity_count',
 'amenity_density_scaled',
 'amenity_proximity_scaled',
 'amenity_entropy_scaled',
 'amenity_equity_scaled',
 'ntl_mean',
 'ntl_median',
 'ntl_min',
 'ntl_max',
 'ntl_std',
 'ntl_sum',
 'px_count',
 'ntl_p10',
 'ntl_p90',
 'bright_frac',
 'moderate_frac',
 'dark_frac',
 'ntl_gini',
 'ntl_skew',
 'ntl_kurtosis']  # <-- set to your features

target_col = ['tier']

bg_df = pd.read_csv("data/all_nodes_withtier.csv")[feature_cols]  # background distribution
row_df = pd.read_csv("data/all_nodes_withtier.csv").iloc[[0]][feature_cols]  # the row to explain

mode = _detect_mode(model)  # "classification" or "regression"
explainer = build_explainer(bg_df, feature_cols, class_names=None, mode=mode)

exp, label_idx = explain_row(model, explainer, row_df, feature_cols, num_features=8)

# Show results
print("Predicted label index:", label_idx)
print("LIME weights:")
for feat, weight in exp.as_list(label=label_idx) if label_idx is not None else exp.as_list():
    print(f"{feat}: {weight:.4f}")

# Optional HTML view
html = exp.as_html(label=label_idx) if label_idx is not None else exp.as_html()
with open("lime_explanation.html", "w") as f:
    f.write(html)